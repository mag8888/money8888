const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');
const Database = require('./database');
const TelegramBot = require('./telegram-bot');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç
const PORT = process.env.PORT || 8080;

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../build')));

// –°–æ–∑–¥–∞–µ–º Socket.IO —Å–µ—Ä–≤–µ—Ä
const io = socketIo(server, {
  cors: {
    origin: (origin, callback) => {
      callback(null, true);
    },
    methods: ["GET", "POST"],
    credentials: true
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
let telegramBot = null;
const BOT_TOKEN = process.env.BOT_TOKEN;
const GAME_URL = process.env.GAME_URL || `https://${process.env.RAILWAY_PUBLIC_DOMAIN || process.env.RAILWAY_STATIC_URL || 'localhost:8080'}`;

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
const users = new Map();
const usernameToUserId = new Map();
const rooms = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User ID
const generateUserId = () => {
  const timestamp = Date.now().toString(36);
  const randomStr = Math.random().toString(36).substring(2, 8);
  return `user_${timestamp}_${randomStr}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
const isUsernameUnique = (username) => {
  return !usernameToUserId.has(username.toLowerCase());
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerUser = (username, email, password, socketId) => {
  const userId = generateUserId();
  const userData = {
    id: userId,
    username: username,
    email: email,
    password: password,
    socketId: socketId,
    createdAt: Date.now(),
    lastSeen: Date.now()
  };
  
  users.set(userId, userData);
  usernameToUserId.set(username.toLowerCase(), userId);
  
  console.log(`üë§ [SERVER] User registered: ${username} (${email}) (ID: ${userId})`);
  return userData;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
const getUserByEmail = (email) => {
  console.log(`üîç [SERVER] Searching for user with email: ${email}`);
  
  for (const [userId, userData] of users.entries()) {
    if (userData.email.toLowerCase() === email.toLowerCase()) {
      console.log(`‚úÖ [SERVER] User found:`, { id: userData.id, username: userData.username, email: userData.email });
      return userData;
    }
  }
  
  console.log(`‚ùå [SERVER] User not found with email: ${email}`);
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è socketId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const updateUserSocketId = (userId, socketId) => {
  console.log(`üîÑ [SERVER] updateUserSocketId called: userId=${userId}, socketId=${socketId}`);
  const user = users.get(userId);
  if (user) {
    user.socketId = socketId;
    user.lastSeen = Date.now();
  }
};

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
const createDefaultRoom = () => {
  const roomId = 'lobby';
  rooms.set(roomId, {
    roomId: roomId,
    displayName: '–õ–æ–±–±–∏',
    maxPlayers: 1,
    gameDuration: 180,
    currentPlayers: [],
    status: 'waiting',
    password: '',
    hostId: null,
    createdAt: Date.now()
  });
  console.log(`üè† [SERVER] Default room created: ${roomId}`);
};

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
createDefaultRoom();

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    bot: telegramBot ? 'active' : 'inactive',
    game_url: GAME_URL,
    version: '1.0.0'
  });
});

app.get('/api/telegram/info', (req, res) => {
  res.json({
    bot: 'https://t.me/anreal_money_bot',
    game: GAME_URL,
    status: telegramBot ? 'active' : 'inactive',
    timestamp: new Date().toISOString()
  });
});

app.get('/api/telegram/images', (req, res) => {
  if (telegramBot) {
    res.json(telegramBot.getImageApiResponse());
  } else {
    res.status(503).json({ error: 'Telegram bot not available' });
  }
});

// API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
app.post('/api/telegram/auth', async (req, res) => {
  try {
    const { telegram_id, first_name, last_name, username, language_code, is_premium } = req.body;
    
    if (!telegram_id) {
      return res.status(400).json({ success: false, error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let telegramUser = await db.getTelegramUser(telegram_id);
    
    if (!telegramUser) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = {
        telegram_id: telegram_id,
        balance: 10, // 10$ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        referrals: 0,
        ref_code: `ref_${telegram_id}`,
        created_at: new Date().toISOString()
      };
      
      await db.createTelegramUser(newUser);
      telegramUser = newUser;
    }

    res.json({ 
      success: true, 
      user: telegramUser,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞'
    });
    
  } catch (error) {
    console.error('Telegram auth error:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../build', 'index.html'));
});

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log(`üîå [SERVER] New client connected: ${socket.id}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.emit('roomsList', []);
  
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('authenticateUser', (username, email, password, callback) => {
    console.log(`üîê [SERVER] authenticateUser event received from socket ${socket.id}`);
    
    try {
      if (!email || !email.trim()) {
        callback({ success: false, error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        return;
      }
      
      const trimmedEmail = email.trim();
      const trimmedPassword = password ? password.trim() : '';
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      const existingUser = getUserByEmail(trimmedEmail);
      
      if (existingUser) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
        console.log(`üîÑ [SERVER] Updating socketId for existing user: ${existingUser.username}`);
        updateUserSocketId(existingUser.id, socket.id);
        
        callback({ 
          success: true, 
          isLogin: true,
          userData: {
            id: existingUser.id,
            username: existingUser.username,
            email: existingUser.email
          }
        });
        
        console.log(`‚úÖ [SERVER] User logged in: ${existingUser.username}`);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ
        if (!username || !username.trim()) {
          callback({ success: false, error: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
          return;
        }
        
        const trimmedUsername = username.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
        if (!isUsernameUnique(trimmedUsername)) {
          callback({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
          return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = registerUser(trimmedUsername, trimmedEmail, trimmedPassword, socket.id);
        
        callback({ 
          success: true, 
          isLogin: false,
          userData: {
            id: userData.id,
            username: userData.username,
            email: userData.email
          }
        });
        
        console.log(`‚úÖ [SERVER] User registered successfully: ${trimmedUsername}`);
      }
    } catch (error) {
      console.error(`‚ùå [SERVER] Error in authenticateUser:`, error);
      callback({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  socket.on('disconnect', () => {
    console.log(`üîå [SERVER] Client disconnected: ${socket.id}`);
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, async () => {
  console.log(`üöÄ Energy of Money Server –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üåê HTTP: http://localhost:${PORT}`);
  console.log(`üì° WebSocket: ws://localhost:${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`ü§ñ API Telegram –±–æ—Ç–∞: http://localhost:${PORT}/api/telegram/info`);
  console.log(`üéÆ Game URL: ${GAME_URL}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
  if (BOT_TOKEN) {
    try {
      telegramBot = new TelegramBot(BOT_TOKEN, GAME_URL, db);
      const botStarted = await telegramBot.start();
      if (botStarted) {
        console.log('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º!');
      } else {
        console.log('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å, –Ω–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', error);
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Telegram –±–æ—Ç–∞');
    }
  } else {
    console.log('‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
process.on('SIGINT', async () => {
  console.log('\nüõë Shutting down server...');
  if (telegramBot) {
    await telegramBot.stop();
  }
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Shutting down server...');
  if (telegramBot) {
    await telegramBot.stop();
  }
  process.exit(0);
});
