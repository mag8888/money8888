import React, { useEffect, useState } from 'react';
import './App.css';
import socket, { connectSocket, isSocketConnected } from './socket';
import Game from './Game';
import TelegramAuth from './TelegramAuth';
import SceneNavigation from './SceneNavigation';
import Lobby from './Lobby';

function App() {
  const [health, setHealth] = useState(null);
  const [socketOk, setSocketOk] = useState(false);
  const [showGame, setShowGame] = useState(true);
  const [showAuth, setShowAuth] = useState(false);
  const [showLobby, setShowLobby] = useState(false);
  const [showProfile, setShowProfile] = useState(false);
  const [showShop, setShowShop] = useState(false);
  const [showLeaderboard, setShowLeaderboard] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [userData, setUserData] = useState({
    id: 'test_user_123',
    username: 'TestPlayer',
    email: 'test@example.com',
    telegramData: { username: 'testuser' }
  });
  const [currentScene, setCurrentScene] = useState('game');

  useEffect(() => {
    (async () => {
      try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ–∫–µ—Ç (same-origin)
        await connectSocket();
        setSocketOk(true);
      } catch (e) {
        setSocketOk(false);
      }
    })();

    const onConnect = () => setSocketOk(true);
    const onDisconnect = () => setSocketOk(false);
    socket.on('connect', onConnect);
    socket.on('disconnect', onDisconnect);
    return () => {
      socket.off('connect', onConnect);
      socket.off('disconnect', onDisconnect);
    };
  }, []);

  const handleStart = async () => {
    try {
      console.log('üöÄ Starting authentication process...');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
      const res = await fetch('/health');
      const json = await res.json();
      setHealth(json.status || 'OK');
      
      if (json.status === 'OK') {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        console.log('‚úÖ Server is healthy, showing auth screen');
        setShowAuth(true);
        setCurrentScene('auth');
      }
    } catch (e) {
      setHealth('ERROR');
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º ‚ùå');
      console.error('Health check failed:', e);
    }
  };

  const handleBackToMain = () => {
    setShowGame(false);
    setShowAuth(false);
    setShowLobby(false);
    setShowProfile(false);
    setShowShop(false);
    setShowLeaderboard(false);
    setShowSettings(false);
    setShowHelp(false);
    setHealth(null);
    setUserData(null);
    setCurrentScene('lobby');
  };

  const handleAuthSuccess = (authUserData) => {
    setUserData(authUserData);
    setShowAuth(false);
    setShowGame(false);
    setShowLobby(true);
    setCurrentScene('lobby');
  };

  const handleSceneChange = (sceneId) => {
    console.log('üé≠ Changing scene to:', sceneId);
    setCurrentScene(sceneId);
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    setShowAuth(false);
    setShowGame(false);
    setShowLobby(false);
    setShowProfile(false);
    setShowShop(false);
    setShowLeaderboard(false);
    setShowSettings(false);
    setShowHelp(false);
    
    switch(sceneId) {
      case 'auth':
        setShowAuth(true);
        break;
      case 'lobby':
        setShowLobby(true);
        break;
      case 'game':
        setShowGame(true);
        break;
      case 'profile':
        setShowProfile(true);
        break;
      case 'shop':
        setShowShop(true);
        break;
      case 'leaderboard':
        setShowLeaderboard(true);
        break;
      case 'settings':
        setShowSettings(true);
        break;
      case 'help':
        setShowHelp(true);
        break;
      default:
        console.log('üé≠ Scene not implemented yet:', sceneId);
        break;
    }
  };

  if (showAuth) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <TelegramAuth onAuthSuccess={handleAuthSuccess} />
      </>
    );
  }

  if (showLobby) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <Lobby userData={userData} onStartGame={() => handleSceneChange('game')} />
      </>
    );
  }

  if (showGame) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <Game onBack={handleBackToMain} userData={userData} />
      </>
    );
  }

  if (showProfile) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <div className="App">
          <header className="App-header">
            <h1>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
            {userData && (
              <div style={{
                background: 'rgba(255,255,255,0.1)',
                padding: '20px',
                borderRadius: '10px',
                margin: '20px 0',
                minWidth: '400px'
              }}>
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
                <p><strong>–ò–º—è:</strong> {userData.username}</p>
                <p><strong>Email:</strong> {userData.email}</p>
                {userData.telegramData && (
                  <p><strong>Telegram:</strong> @{userData.telegramData.username || 'N/A'}</p>
                )}
                <p><strong>ID:</strong> {userData.id}</p>
              </div>
            )}
            <button className="start-button" onClick={() => handleSceneChange('lobby')}>
              ‚Üê –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏
            </button>
          </header>
        </div>
      </>
    );
  }

  if (showShop) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <div className="App">
          <header className="App-header">
            <h1>üõí –ú–∞–≥–∞–∑–∏–Ω</h1>
            <div style={{
              background: 'rgba(255,255,255,0.1)',
              padding: '20px',
              borderRadius: '10px',
              margin: '20px 0',
              minWidth: '400px'
            }}>
              <h3>–¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏</h3>
              <p>üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>
              <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã</p>
            </div>
            <button className="start-button" onClick={() => handleSceneChange('lobby')}>
              ‚Üê –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏
            </button>
          </header>
        </div>
      </>
    );
  }

  if (showLeaderboard) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <div className="App">
          <header className="App-header">
            <h1>üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</h1>
            <div style={{
              background: 'rgba(255,255,255,0.1)',
              padding: '20px',
              borderRadius: '10px',
              margin: '20px 0',
              minWidth: '400px'
            }}>
              <h3>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</h3>
              <p>üèÖ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>
              <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</p>
            </div>
            <button className="start-button" onClick={() => handleSceneChange('lobby')}>
              ‚Üê –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏
            </button>
          </header>
        </div>
      </>
    );
  }

  if (showSettings) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <div className="App">
          <header className="App-header">
            <h1>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
            <div style={{
              background: 'rgba(255,255,255,0.1)',
              padding: '20px',
              borderRadius: '10px',
              margin: '20px 0',
              minWidth: '400px'
            }}>
              <h3>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã</h3>
              <p>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>
              <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</p>
            </div>
            <button className="start-button" onClick={() => handleSceneChange('lobby')}>
              ‚Üê –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏
            </button>
          </header>
        </div>
      </>
    );
  }

  if (showHelp) {
    return (
      <>
        <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
        <div className="App">
          <header className="App-header">
            <h1>‚ùì –ü–æ–º–æ—â—å –∏ FAQ</h1>
            <div style={{
              background: 'rgba(255,255,255,0.1)',
              padding: '20px',
              borderRadius: '10px',
              margin: '20px 0',
              minWidth: '400px',
              textAlign: 'left'
            }}>
              <h3>üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å</h3>
              <ul style={{ textAlign: 'left', paddingLeft: '20px' }}>
                <li>üé≤ –ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫ –∏ –ø–µ—Ä–µ–º–µ—â–∞–π—Ç–µ—Å—å –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é</li>
                <li>üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —è—á–µ–π–∫–∞—Ö –¥–æ—Ö–æ–¥–∞</li>
                <li>üí∏ –¢—Ä–∞—Ç—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —è—á–µ–π–∫–∞—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤</li>
                <li>üèÜ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã</li>
              </ul>
              
              <h3>‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h3>
              <ul style={{ textAlign: 'left', paddingLeft: '20px' }}>
                <li><strong>A</strong> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</li>
                <li><strong>L</strong> - –õ–æ–±–±–∏</li>
                <li><strong>G</strong> - –ò–≥—Ä–∞</li>
                <li><strong>P</strong> - –ü—Ä–æ—Ñ–∏–ª—å</li>
                <li><strong>S</strong> - –ú–∞–≥–∞–∑–∏–Ω</li>
                <li><strong>R</strong> - –†–µ–π—Ç–∏–Ω–≥</li>
                <li><strong>C</strong> - –ù–∞—Å—Ç—Ä–æ–π–∫–∏</li>
                <li><strong>H</strong> - –ü–æ–º–æ—â—å</li>
              </ul>
            </div>
            <button className="start-button" onClick={() => handleSceneChange('lobby')}>
              ‚Üê –ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏
            </button>
          </header>
        </div>
      </>
    );
  }

  return (
    <>
      <SceneNavigation currentScene={currentScene} onSceneChange={handleSceneChange} />
      <div className="App">
        <header className="App-header">
          <h1>Energy of Money</h1>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ä—Ç‚Äë—Å—Ç—Ä–∞–Ω–∏—Ü–∞.</p>
        <p style={{color:'#fff', opacity:0.9, marginTop: '-10px'}}>
          Socket: {socketOk ? '‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}{health ? ` ‚Ä¢ Health: ${health}` : ''}
        </p>
        <button 
          className="start-button"
          onClick={handleStart}
          disabled={!socketOk}
        >
          {socketOk ? '–°–¢–ê–†–¢' : '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...'}
        </button>
      </header>
      </div>
    </>
  );
}

export default App;
