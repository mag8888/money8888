import io from 'socket.io-client';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const SERVER_PORT = 5000;
const SERVER_HOST = window.location.hostname || 'localhost';

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π URL –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω–µ—à–Ω–∏–π Socket-—Å–µ—Ä–≤–µ—Ä)
// –ü—Ä–∏–º–µ—Ä: REACT_APP_SOCKET_URL=https://your-backend.example.com
const ENV_SOCKET_URL = process.env.REACT_APP_SOCKET_URL?.trim();

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
const baseUrl = ENV_SOCKET_URL
  ? ENV_SOCKET_URL
  : (process.env.NODE_ENV === 'production'
      ? `${window.location.protocol}//${SERVER_HOST}` // –î–ª—è Vercel —É–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç
      : `${window.location.protocol}//${SERVER_HOST}:${SERVER_PORT}`);

console.log('üîå [Socket] Configuration:', { 
  baseUrl, 
  env: process.env.NODE_ENV,
  hostname: SERVER_HOST,
  port: SERVER_PORT,
  protocol: window.location.protocol
});

// –°–æ–∑–¥–∞–µ–º Socket.IO —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const socket = io(baseUrl, {
  transports: ['polling', 'websocket'], // –°–Ω–∞—á–∞–ª–∞ polling, –ø–æ—Ç–æ–º websocket
  reconnection: true,
  reconnectionAttempts: 5,
  reconnectionDelay: 2000,
  reconnectionDelayMax: 5000,
  timeout: 10000,
  autoConnect: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  forceNew: false,
  upgrade: true,
  rememberUpgrade: true,
  maxReconnectionAttempts: 5
});

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
let isConnecting = false;
let connectionPromise = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å Promise
export const connectSocket = async () => {
  if (socket.connected) {
    console.log('üîå [Socket] Already connected');
    return socket;
  }

  if (isConnecting && connectionPromise) {
    console.log('üîå [Socket] Connection in progress, waiting...');
    return connectionPromise;
  }

  isConnecting = true;
  
  connectionPromise = new Promise((resolve, reject) => {
    const timeout = setTimeout(() => {
      reject(new Error('Connection timeout'));
    }, 10000);

    const onConnect = () => {
      clearTimeout(timeout);
      isConnecting = false;
      console.log('‚úÖ [Socket] Connected successfully:', {
        id: socket.id,
        server: baseUrl,
        transport: socket.io.engine.transport.name
      });
      resolve(socket);
    };

    const onConnectError = (error) => {
      clearTimeout(timeout);
      isConnecting = false;
      console.error('‚ùå [Socket] Connection failed:', error);
      reject(error);
    };

    socket.once('connect', onConnect);
    socket.once('connect_error', onConnectError);

    console.log('üîå [Socket] Attempting connection...');
    socket.connect();
  });

  return connectionPromise;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
export const disconnectSocket = () => {
  if (socket.connected) {
    console.log('üîå [Socket] Disconnecting...');
    socket.disconnect();
  }
  isConnecting = false;
  connectionPromise = null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const isSocketConnected = () => socket.connected;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
socket.on('connect', () => {
  console.log('‚úÖ [Socket] Connected:', socket.id);
});

socket.on('disconnect', (reason) => {
  console.warn('‚ö†Ô∏è [Socket] Disconnected:', { reason, id: socket.id });
  isConnecting = false;
  connectionPromise = null;
});

socket.on('connect_error', (error) => {
  console.error('‚ùå [Socket] Connection error:', {
    message: error.message,
    description: error.description,
    context: error.context,
    type: error.type,
    baseUrl: baseUrl,
    transport: socket.io.engine?.transport?.name || 'unknown'
  });
  isConnecting = false;
  connectionPromise = null;
});

socket.on('reconnect_attempt', (attemptNumber) => {
  console.log('üîÑ [Socket] Reconnection attempt:', attemptNumber);
});

socket.on('reconnect', (attemptNumber) => {
  console.log('‚úÖ [Socket] Reconnected after', attemptNumber, 'attempts');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (window.location.pathname.includes('/room/')) {
    const roomId = window.location.pathname.split('/room/')[1]?.split('/')[0];
    if (roomId) {
      console.log('üîÑ [Socket] Restoring room state after reconnection:', roomId);
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
      socket.emit('restoreRoomState', roomId);
    }
  }
});

socket.on('reconnect_error', (error) => {
  console.error('‚ùå [Socket] Reconnection error:', error.message);
});

socket.on('reconnect_failed', () => {
  console.error('üí• [Socket] Reconnection failed - giving up');
  isConnecting = false;
  connectionPromise = null;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
socket.on('error', (error) => {
  console.error('üí• [Socket] General error:', error);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º socket –∏ —Ñ—É–Ω–∫—Ü–∏–∏
export default socket;
